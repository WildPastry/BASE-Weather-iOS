// imports
import React from 'react';

// default component functions
import { Animated, Button, Image, Text, TouchableOpacity, View } from 'react-native';

// configuration data
import configData from './../data/config.json';

// brand icon
// import BrandIcon from './../assets/brand.png';

// colours
import colours from './../assets/colours.json';

// lottie
import LottieView from 'lottie-react-native';

// timeout
import timeout from './../data/timeout.js';

// firebase
import * as firebase from "firebase/app";
import "firebase/database";

// run timeout function
{ timeout }

// Firebase project configuration
const FIREBASECONFIG = {
  apiKey: configData.GEO,
  authDomain: configData.AUTHDOMAIN,
  databaseURL: configData.DATABASEURL,
  projectId: configData.PROJECTID,
  storageBucket: configData.STORAGEBUCKET,
  messagingSenderId: configData.MESSAGINGSENDERID,
  appId: configData.APPID
};

// // Initialize Firebase
if (!firebase.apps.length) {
  firebase.initializeApp(FIREBASECONFIG);
}

// // firebase database
const SIMPLEWEATHER_DATABASE = firebase.database();
const ref = SIMPLEWEATHER_DATABASE.ref("weather/");
const locationRef = ref.child("locations");

// generate a reference to a new location and add some data
var newLocationRef = locationRef.push();

// get the unique key generated
var newLocationId = newLocationRef.key;

// snapshot ref
var snapShotRef = locationRef.child(newLocationId);

// var ref = SIMPLEWEATHER_DATABASE.ref('savedLocation/' + 1);
// console.log(locationsRef)
// ref.on("value", function (snapshot) {
//   console.log('Database value: ' + snapshot.val());
// }, function (errorObject) {
//   console.log('The read failed: ' + errorObject.code);
// });
// Generate a reference to a new location and add some data using push()
// var newPostRef = postsRef.push();
// Get the unique key generated by push()
// var postId = newPostRef.key;
// SIMPLEWEATHER_DATABASE.ref('savedLocation/' + 1).set({
//   lat: this.props.currentLat,
//   lng: this.props.currentLng,
//   location: this.props.currentLocation
// }, function (error) {
//   if (error) {
//     console.log(error);
//   } else {
//     console.log('Location details saved to database...');
//   }
// });

// stylesheet
var styles = require('../styles.js');

// create animated view
const AnimatedTouchable = Animated.createAnimatedComponent(TouchableOpacity);

// START header
class Header extends React.Component {
  // default class header constructor
  constructor(props) {
    super(props);
    this.state = {
      progress: false,
      showMenu: false,
      savedLocations: []
    };
    // bind functions to state
    this.getData = this.getData.bind(this);
    this.handleAnimate = this.handleAnimate.bind(this);
    this.handleLocation = this.handleLocation.bind(this);
  }

  componentDidMount() {

    locationRef.on("value", snapshot => {

      let savedLocations = snapshot.val();

      console.log(savedLocations);

      let newState = [];

      for(let movie in savedLocations){
        newState.push({
          id: savedLocations[movie].id,
          title: savedLocations[movie].title,
          rating: savedLocations[movie].rating,
          poster: savedLocations[movie].poster
        });
      }

      this.setState({
        savedLocations: newState
      });

    });
  }

  // get data
  getData() {
    // const { currentUser } = firebase.auth();
    // snapShotRef
      // .on('child_added', snap => {
      //   var savedLocations = this.state.savedLocations;
      //   savedLocations.push({ lat: snap.val().lat, lng: snap.val().lng,
      //     location: snap.val().location });
      //   this.setState({ savedLocations: savedLocations });
      // })
    console.log('Inside data function');
    console.log(this.state);
    console.log(this.state.savedLocations);
    console.log(SIMPLEWEATHER_DATABASE.ref("weather/locations/"));
    console.log(snapShotRef);
    // // save location to state
    // let savedLocations = [...this.state.savedLocations];
    // //adding new data
    // savedLocations.push({
    //   savedLat: newPost.lat,
    //   savedLng: newPost.lng,
    //   savedLocation: newPost.location
    // });
    // //updating the state value
    // this.setState({ savedLocations }), () => {
    //   console.log('Are we there yet?');
    // }
  }

  // handle animation
  handleAnimate = () => {
    console.log('Animating from 20...');
    if (this.state.progress === false) {
      this.animation.play(20, 80);
      this.setState({
        progress: true,
        showMenu: true
      });
    } else {
      console.log('Animating from 110...');
      this.animation.play(110, 150);
      this.setState({
        progress: false,
        showMenu: false
      });
    }
  }

  // handle location
  handleLocation = () => {
    console.log('Handle location pressed...');
    // save location details to database
    newLocationRef.set({
      lat: this.props.currentLat,
      lng: this.props.currentLng,
      location: this.props.currentLocation
    }, function (error) {
      if (error) {
        console.log(error);
      } else {
        console.log('Location details saved with key: ' + newLocationId);
        // var savedLat = snapShotRef.lat
        // ref.on("child_added", function (snapshot) {
        //   var newPost = snapshot.val();
        //   console.log('ID: ' + newPost.newLocationId);
        //   console.log('Lat: ' + newPost.lat);
        //   console.log('Lng: ' + newPost.lng);
        //   console.log('Location: ' + newPost.location);
        //   console.log(newPost);
        // });
        // check latest entry added
        // snapShotRef.on('value', function (snapshot) {
        //   console.log(snapshot.val());
        //   this.setState({ savedLocations: snapshot.val() });
        // });
      }
    });

    snapShotRef
      .on('value', function (snapshot) {
        console.log(snapshot.val());
      });

    // snapShotRef
    //   .on('child_added', snap => {
    //     var savedLocations = this.state.savedLocations;
    //     savedLocations.push({ location: snap.val() });
    //     this.setState({ savedLocations: savedLocations });
    //   })
    // console.log('Inside data function');
    // console.log(this.state);
    // console.log(this.state.savedLocations);
    // this.getData();
    // view latest db entry
    // this.viewLatestEntry();
  }

  // view entry
  // viewLatestEntry = () => {
  //   // Retrieve new posts as they are added to our database
  //   ref.on("child_added", function (snapshot, prevChildKey) {
  //     var newPost = snapshot.val();
  //     console.log("Author: " + newPost.author);
  //     console.log("Title: " + newPost.title);
  //     console.log("Previous Post ID: " + prevChildKey);
  //   });
  // }

  // START render header
  render() {

    return (
      // master wrap
      <View>
        {/* header wrap */}
        <View style={styles.headerWrap}>
          {/* hamburger */}
          <AnimatedTouchable onPress={this.handleAnimate} style={{
            height: 35,
            width: 35,
          }}>
            <LottieView
              ref={animation => {
                this.animation = animation;
              }}
              source={require('./../assets/animations/hamburger.json')}
              loop={false}
            />
          </AnimatedTouchable>
          {/* brand wrap */}
          <View style={{ flexDirection: 'row' }}>
            {/* brand text */}
            <Text
              style={{
                color: colours.white,
                fontSize: 22,
                fontFamily: 'allerDisplay',
                textAlign: 'center',
                paddingTop: 4
              }}>
              SIMPLE WEATHER
             </Text>
            {/* brand logo */}
            {/* <Image
              style={styles.brandIconSmall}
              source={BrandIcon}
              resizeMode='contain'
            /> */}
          </View>
          {/* right icon for balance */}
          <View style={{
            backgroundColor: colours.simpleWeather,
            height: 35,
            width: 35
          }} />
        </View>
        {/* menu */}
        {this.state.showMenu &&
          <View style={styles.menuWrap}>
            <TouchableOpacity onPress={this.handleLocation}>
              <Text style={styles.menuText}>Save this location</Text>
            </TouchableOpacity>
          </View>
        }
      </View>
    );
  }
  // END render header
}
// END header

export default Header;
